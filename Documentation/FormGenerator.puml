@startuml

class Widget {
  - __formGeneratorFactory
  + setup()
}

Widget::__formGeneratorFactory ..> FormGeneratorFactory: uses


class FormGeneratorFactory {
  + {static} getFormGenerator(filePath): JSONFormGenerator
}

FormGeneratorFactory::getFormGenerator ..> FormGenerator: returns

class FormGenerator {
  + {virtual} generate(): QFrame
  - __init__(filePath)
}

' factory pattern taking json file name returning

class JSONFormGenerator {

}

class YAMLFormGenerator {

}

note left of FormGeneratorFactory: \
Depending on file type returning \n\
a concrete implementation of \n\
FormGenerator

FormGenerator <|-- JSONFormGenerator
FormGenerator <|-- YAMLFormGenerator

abstract class AbstractField {
  # _title: string
  # _schema: dict
  # _data: dict
  + getData(): dict
  + {abstract} setup()
  # _updateData(key, value)
}

AbstractField <|-- AbstractFieldWidget
qt.QWidget <|-- AbstractFieldWidget


abstract class AbstractFieldWidget {
}

class JSONFieldFactory {
}

class JSONStringField {

}

class JSONObjectField {
  # _data: dict
}

AbstractField <|-- JSONObjectField
qt.QGroupBox <|-- JSONObjectField


class JSONNumberField {

}

class JSONIntegerField {

}

class JSONArrayField {
}

class JSONEnumField {
}

AbstractFieldWidget <|-- JSONEnumField
JSONEnumField <|-- JSONStringField
JSONEnumField <|-- JSONNumberField
JSONNumberField <|-- JSONIntegerField
AbstractFieldWidget <|-- JSONArrayField

JSONFormGenerator ..> AbstractFieldWidget:uses

@enduml